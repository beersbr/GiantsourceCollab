<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Tactex Map Editor</title>
    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">  
    <style>
      /* canvas{ background-color:black; position: absolute; top: 0; left: 0; width: 100%; height: 100%; margin: 0; } */
    </style>
    <script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
    <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="webgl-utils.js"></script>
    
    <script id="shader-fs" type="x-shader/x-fragment">
      precision mediump float;
      
      varying vec4 vColor;
  
      void main(void) {
          gl_FragColor = vColor;
      }
    </script>
    
    <script id="shader-vs" type="x-shader/x-vertex">
      attribute vec3 aVertexPosition;
      attribute vec4 aVertexColor;
    
      uniform mat4 uMVMatrix;
      uniform mat4 uPMatrix;
    
      varying vec4 vColor;
    
      void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = aVertexColor;
      }
    </script>
  
  
    <script type="text/javascript">
    
      var gl;
      function initGL(canvas) {
        try {
          // Get the WebGL context
          gl = canvas.getContext("experimental-webgl");
          
          // Set the gl view positions
          gl.viewportWidth = canvas.width;
          gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        // If gl didn't load, there was some error
        if (!gl) {
          alert("Could not initialise WebGL, sorry :-(");
        }
      }
      
      
      function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
          return null;
        }
        
        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
          if (k.nodeType == 3) {
              str += k.textContent;
          }
          k = k.nextSibling;
        }
        
        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
          shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
          shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
          return null;
        }
        
        gl.shaderSource(shader, str);
        gl.compileShader(shader);
        
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(shader));
          return null;
        }
        
        return shader;
      }
      
      
      var shaderProgram;
      
      function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");
        
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
          alert("Could not initialise shaders");
        }
        
        gl.useProgram(shaderProgram);
        
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        
        // Tell WebGL that we will want to provide values for the attribute using an array
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
        
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
      }
      
      // Setup the model view and projection matricies as an empty matrix
      var mvMatrix = mat4.create();
      var mvMatrixStack = [];
      var pMatrix = mat4.create();
      
      // Add a new copy of the current matrix to the stack
      function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
      }

      // Remove the last matrix from the stack
      function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
          throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
      }
      
      // Send WebFL the values from the matricies
      function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
      }


      function degToRad(degrees) {
        return degrees * Math.PI / 180;
      }
      
      // Declare variables for triable and cube
      /*  (In any real-world WebGL page you wouldn’t have a 
          separate global variable for each object in the scene, 
          but we’re using them here to keep things simple, 
          as we’re just getting started.)
      */
      var pyramidVertexPositionBuffer;
      var pyramidVertexColorBuffer;
      var cubeVertexPositionBuffer;
      var cubeVertexColorBuffer;
      var cubeVertexIndexBuffer;
      
      function initBuffers() {
        // Create buffer for pyramid's vertex positions
        pyramidVertexPositionBuffer = gl.createBuffer();
        
        
        // Tell WebGL which buffer to use
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
        
        // Set up vertices for pyramid
        var vertices = [
            // Front face
             0.0,  1.0,  0.0,
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,

            // Right face
             0.0,  1.0,  0.0,
             1.0, -1.0,  1.0,
             1.0, -1.0, -1.0,

            // Back face
             0.0,  1.0,  0.0,
             1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0,

            // Left face
             0.0,  1.0,  0.0,
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0
        ];
        
        // Fill GL buffer with pyramid's verticies
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        
        // Assign pyramid's verticies item data
        pyramidVertexPositionBuffer.itemSize = 3;
        pyramidVertexPositionBuffer.numItems = 12;
        
        // Create a buffer for the pyramid's color
        pyramidVertexColorBuffer = gl.createBuffer();
        
        // Use this buffer WebGL
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
        
        // Define the colors
        var colors = [
            // Front face
            1.0, 0.0, 0.0, 1.0,
            0.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,

            // Right face
            1.0, 0.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 1.0,

            // Back face
            1.0, 0.0, 0.0, 1.0,
            0.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,

            // Left face
            1.0, 0.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 1.0
        ];
        
        // Fill GL buffer with pyramid's colors
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        
        // Assign pyramid's color item data
        pyramidVertexColorBuffer.itemSize = 4;
        pyramidVertexColorBuffer.numItems = 12;        
        
        
        /**** CUBE ****/
        
        
        // Create buffer for cube's vertex positions
        cubeVertexPositionBuffer = gl.createBuffer();
        
        // Tell WebGL which buffer to use
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        
        // Set up verticies for cube
         vertices = [
            // Front face
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,
             1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,

            // Back face
            -1.0, -1.0, -1.0,
            -1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0, -1.0, -1.0,

            // Top face
            -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,
             1.0,  1.0,  1.0,
             1.0,  1.0, -1.0,

            // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0,  1.0,
            -1.0, -1.0,  1.0,

            // Right face
             1.0, -1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0,  1.0,
             1.0, -1.0,  1.0,

            // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0,
            -1.0,  1.0,  1.0,
            -1.0,  1.0, -1.0
        ];
        
        // Fill GL buffer with cube's verticies
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        
        // Assign cube's item data
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = 24;
        
        
        cubeVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        colors = [
            [1.0, 0.0, 0.0, 1.0], // Front face
            [1.0, 1.0, 0.0, 1.0], // Back face
            [0.0, 1.0, 0.0, 1.0], // Top face
            [1.0, 0.5, 0.5, 1.0], // Bottom face
            [1.0, 0.0, 1.0, 1.0], // Right face
            [0.0, 0.0, 1.0, 1.0]  // Left face
        ];
        var unpackedColors = [];
        for (var i in colors) {
            var color = colors[i];
            for (var j=0; j < 4; j++) {
                unpackedColors = unpackedColors.concat(color);
            }
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
        cubeVertexColorBuffer.itemSize = 4;
        cubeVertexColorBuffer.numItems = 24;        
        
        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = 36;
        
      }
      
      // Rotation tracking
      var rPyramid = 0;
      var rCube = 0;
      
      function drawScene() {
        // Setup the viewable area
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        
        // Clear the canvas
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        
        // Set the point of view (perspective) in which to view the scene 
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
        
        // Set the model view matrix to the identity matrix
        mat4.identity(mvMatrix);
        
        // Move to the position we want to draw the pyramid
        mat4.translate(mvMatrix, [-1.5, 0.0, -7.0]);
        
        // Store the current matrix
        mvPushMatrix();
        
        // Rotate the matrix
        mat4.rotate(mvMatrix, degToRad(rPyramid), [0, 1, 0]);
    
        // Load the pyramid vertex buffer
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
        
        // Draw the lines based on the pyramid's settings
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        // Load the pyramid color buffer
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);                                                                
        
        // Draw colors based on pyramid's settings
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        // Move the content to the video card
        setMatrixUniforms();
        
        // Tell WebGL to draw the content
        gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);
        
        // Restore the previously stored matrix
        mvPopMatrix();
        
        /*******  cube ********/
        
        
        // Move to the position we want to draw the cube
        mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);
        
        // Store the current matrix
        mvPushMatrix();
        
        // Rotate the matrix
        mat4.rotate(mvMatrix, degToRad(rCube), [1, 1, 1]);
        
        // Load the cube vertex buffer
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        
        // Draw the lines based on the cube's settings
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        // Load the cube color buffer
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        
        // Draw the colors based on the cube's settings
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        
        // Move the content to the video card
        setMatrixUniforms();
        
        // Tell WebGL to draw the content
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        
        // Restore the previously stored matrix
        mvPopMatrix();
      }
      
      // 
      var lastTime = 0;
      
      // Update values to show animation
      function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
          var elapsed = timeNow - lastTime;
          
          // Rotate triagle 90 times per second
          rPyramid += (90 * elapsed) / 1000.0;
          rCube -= (75 * elapsed) / 1000.0;
        }
        lastTime = timeNow;
      }
      
      function tick() {
         // Function from webgl-utils.js to ask browser to call back next time it wants to draw
         requestAnimFrame(tick);
         
         drawScene();
         animate();
      }  
      
      function webGLStart() {
        var canvas = document.getElementById("lesson01-canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        
        // Clear the canvas and make it black
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        
        // Enable depth so background items are drawn behind foreground ones
        gl.enable(gl.DEPTH_TEST);
        
        tick();
      }
    
    
    </script>
  </head>

  <body onload="webGLStart();">
    <canvas id="lesson01-canvas" style="border: none;" width="500" height="500"></canvas>
  </body>
</html>










